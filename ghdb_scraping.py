import time
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options
import argparse
from argparse import RawTextHelpFormatter

if len(sys.argv)<2:
    print('Sem argumentos digite "python3 ghdb_scraping.py -h" para ver suas opções')
    sys.exit()


# Inicializar argumentos
parser = argparse.ArgumentParser(description='python3 ghdb_scraping.py -m "Index Of"',
                                 formatter_class=RawTextHelpFormatter)
parser.add_argument('-f', type=int, action='store', dest='filtro',
                    help='Seleciona um número para escolher o filtro.\n\t1 - Footholds  \n\t2 - Files Containing '
                         'Usernames  \n\t3 - Sensitive Directories  \n\t4 - Web Server Detection  \n\t5 - Vulnerable '
                         'Files  \n\t6 - Vulnerable Servers  \n\t7 - Error Messages  \n\t8 - Files Containing Juicy '
                         'Info  \n\t9 - Files Containing Passwords  \n\t10 - Sensitive Online Shopping Info  \n\t11 - '
                         'Network or Vulnerability Data  \n\t12 - Pages Containing Login Portals  \n\t13 - Various '
                         'Online Devices  \n\t14 - Advisories and Vulnerabilities ',
                    required=False, default=0)
parser.add_argument('-m', action='store', dest='manual', help='Digite o que deseja pesquisar, Ex: "Index Of"',
                    required=True, default=0)
parser.add_argument('-o', action='store', dest='file', help='Nome do arquivo de saída, Ex: file.txt',
                    required=False, default=0)
parser.add_argument('-d', type=int, action='store', dest='dominio',
                    help='Pesquisar no google-database ou exploit-db\n\t1 - google database dorks\n\t2 - exploit-db',
                    required=False, default=0)
arguments = parser.parse_args()

options = Options()
options.add_argument('--headless')
DRIVER_PATH = r'./geckodriver'
browser = webdriver.Firefox(executable_path=DRIVER_PATH, options=options) #, options=options


if arguments.dominio == 2:
    browser.get('https://www.exploit-db.com')
    linha = 4
else:
    browser.get('https://www.exploit-db.com/google-hacking-database')
    linha = 1


# Selecionar Filtros
filtros = ["Footholds", "Files Containing Usernames", "Sensitive Directories", "Web Server Detection",
           "Vulnerable Files", "Vulnerable Servers", "Error Messages", "Files Containing Juicy Info",
           "Files Containing Passwords", "Sensitive Online Shopping Info", "Network or Vulnerability Data",
           "Pages Containing Login Portals", "Various Online Devices", "Advisories and Vulnerabilities"]
time.sleep(1)
if arguments.filtro != 0:
    browser.find_element_by_xpath(
        '/html/body/div/div[2]/div[2]/div/div/div[2]/div[1]/div[1]/div/div[2]/div/button[1]/i').click()
    browser.find_element_by_xpath("//*[@id=\"categorySelect-selectized\"]").send_keys(
        filtros[(arguments.filtro - 1)] + Keys.ENTER)


# Escolher quantidade de linhas serem monstradas
time.sleep(1)
select = Select(browser.find_element_by_xpath("//*[@id=\"exploits-table_length\"]/label/select"))
select.select_by_value(str(120))

# Filtro Manual
time.sleep(1)
if arguments.manual:
    browser.find_element_by_xpath(
        '/html/body/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div[1]/div[2]/div/label/input').send_keys(
        arguments.manual)

# listar todas as páginas se existir
time.sleep(3)
quant_paginas = browser.find_element_by_id("exploits-table_last")
a = quant_paginas.find_element_by_xpath('//*[@id="exploits-table_last"]/a')
ul_pagination = browser.find_element_by_xpath(
    "/html/body/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div[3]/div[2]/div/ul")
li = ul_pagination.find_element_by_xpath(
    "//*[@id=\"exploits-table_paginate\"]/ul/li[" + str(int(a.get_attribute("data-dt-idx")) - 1) + "]")

count = 4
paginas = int(li.text)


#Criar Arquivos
if arguments.file:
    arquivo = open("./payloads/" + arguments.file, "w")
else:
    arquivo = open("./payloads/dorks.txt", "w")

if str(li.text).isnumeric() and int(li.text) >= 2:
    for x in range(1, paginas+1):
        time.sleep(1)
        table = browser.find_element_by_css_selector("#exploits-table")
        tbody = table.find_element_by_css_selector("tbody")

        for coluna in tbody.find_elements_by_xpath('tr'):
            print(coluna.find_elements_by_css_selector("td")[linha].find_element_by_css_selector("a").get_attribute(
            'textContent'))
            arquivo.write(coluna.find_elements_by_css_selector("td")[linha].find_element_by_css_selector("a").get_attribute('textContent')+"\n")


        if x == paginas:
            break

        browser.find_element_by_xpath(
            "/html/body/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div[3]/div[2]/div/ul/li[" + str(
                count) + "]/a").click()
        
        time.sleep(2)
        count = count + 1

        
else:
    time.sleep(1)
    table = browser.find_element_by_css_selector("#exploits-table")
    tbody = table.find_element_by_css_selector("tbody:nth-child(2)")
    for coluna in tbody.find_elements_by_css_selector('tr'):
        print(coluna.find_elements_by_css_selector("td")[linha].find_element_by_css_selector("a").get_attribute(
            'textContent'))
        arquivo.write(coluna.find_elements_by_css_selector("td")[linha].find_element_by_css_selector("a").get_attribute(
            'textContent') + "\n")
arquivo.close()

browser.close()
